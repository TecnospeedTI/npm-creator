#!/usr/bin/env node

var async = require('async')
var chalk = require('chalk')
var minimist = require('minimist')
var Spinner = require('cli-spinner').Spinner

var args = minimist(process.argv.slice(2))

if (args.v || args.version) {
  console.log(require('../package.json').version)
  process.exit()
}

if (!args._.length) {
  console.log()
  console.log('  Usage: npm-creator <project-name>')
  console.log()
  console.log('  Options:')
  console.log()
  console.log('    -v, --version\tShow current version')
  console.log('    -t, --type\t\tDefine which template to use (bin-lib, lib). Default: bin-lib')
  console.log('    -l, --license\tDefine which license to use (mit, apache, gnu). Default: mit')
  console.log()
  process.exit()
}

function errorExit (message) {
  console.log(chalk.red(message))
  process.exit(1)
}

var type = (args.t || args.type || 'bin-lib').toLowerCase()

if (type && ['bin-lib', 'lib'].indexOf(type) === -1) {
  errorExit('Invalid type. Possible values: bin-lib, lib')
}

var license = (args.l || args.license || 'mit').toLowerCase()

if (license && ['mit', 'apache', 'gnu'].indexOf(license) === -1) {
  errorExit('Invalid license. Possible values: mit, apache, gnu')
}

var checkName = require('../lib/check_name')
var confirmName = require('../lib/confirm_name')
var downloadTemplate = require('../lib/download_template')
var createStructure = require('../lib/create_structure')

var begin
var options = {
  name: args._[0],
  type: type,
  license: license
}
var errors = {
  REQUEST: 'Unexpected error while parsing response from the npms.io API',
  URL_FRIENDLY: 'Name must be URL-friendly',
  CREATING_STRUCTURE: 'Unexpected error while creating the project structure',
  PATH_EXIST: 'There is already a directory with the specified name',
  WRITE_FILE: 'Error while extracting template file'
}

async.series([
  function (next) {
    console.log()
    var spinner = new Spinner('%s Checking availability...')
    spinner.start()
    checkName(options, function (err, isNameAvailable) {
      spinner.stop(true)
      if (err) return next(err)
      if (isNameAvailable) {
        console.log(chalk.green.bold('[ok] ') + 'Checking availability...')
        return next()
      }
      confirmName(function (err) {
        if (err) return next(err)
        console.log()
        next()
      })
    })
  },
  function (next) {
    begin = new Date().getTime()
    next()
  },
  function (next) {
    var spinner = new Spinner('%s Downloading template...')
    spinner.start()
    downloadTemplate(options, function (err) {
      spinner.stop(true)
      if (err) return next(err)
      console.log(chalk.green.bold('[ok] ') + 'Downloading template...')
      next()
    })
  },
  function (next) {
    var spinner = new Spinner('%s Creating structure...')
    spinner.start()
    createStructure(options, function (err) {
      spinner.stop(true)
      if (err) return next(err)
      console.log(chalk.green.bold('[ok] ') + 'Creating structure...')
      next()
    })
  }
], function (err) {
  console.log()
  if (err && err.message === 'EXIT') process.exit()
  if (err) return errorExit(errors[err.message])
  var timeElapsed = (new Date().getTime() - begin) / 1000
  console.log('Process finished successfully' + chalk.gray(' (' + timeElapsed.toFixed(2) + 's)'))
  console.log()
  process.exit()
})
